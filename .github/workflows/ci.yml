name: ci

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      - name: Run tests with coverage
        run: go test -cover ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # This is a CLI that interacts with the user's local files, so G304 is excluded.
      - name: Run security analysis
        run: gosec -exclude=G304 ./...

      - name: Install djlint
        run: pip3 install djlint

      - name: Lint HTML templates
        run: djlint --profile=golang templates/

  format:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      - name: Check Go formatting
        run: |
          files=$(find . -name "*.go" -not -name "*_templ.go" -not -path "./vendor/*")
          if [ -n "$files" ]; then
            unformatted=$(gofmt -l $files)
            if [ -n "$unformatted" ]; then
              echo "Unformatted files: $unformatted"
              exit 1
            fi
          fi
